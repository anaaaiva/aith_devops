name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
    tags:
      - 'v*'    # реагировать на пуши тегов вида v1.0, v2.0 и т.д.
  pull_request:
    branches:
      - '*'

jobs:
  test:
    name: Test Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check directories exist
        run: |
          test -d dags || (echo "Directory dags/ not found!" && exit 1)
          test -d spark || (echo "Directory spark/ not found!" && exit 1)

  build:
    name: Build Docker Image
    needs: test
    if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t image_name .

  deploy:
    name: Deploy Application
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v') # Только если пуш тега

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Deploy with Docker Compose
        run: |
          docker-compose rm -sf || true
          docker-compose up -d
          echo "Application successfully deployed!"

  clear:
    name: Clear Deployment (Manual)
    if: github.event_name == 'workflow_dispatch' # запуск вручную
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Set environment variables
        run: |
          echo "AIRFLOW_UID=$(id -u)" >> .env
          echo "AIRFLOW_GID=$(id -g)" >> .env

      - name: Clean up deployment
        run: docker-compose rm -sf